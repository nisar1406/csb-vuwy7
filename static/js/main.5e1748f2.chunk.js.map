{"version":3,"sources":["constant.js","App.js","index.js"],"names":["dataToBeShown","Item","styled","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","App","useState","isLandscape","setIsLandscape","userData","setUserData","showDetails","setShowDetails","useEffect","checkOrientation","window","addEventListener","screen","orientation","type","successCallBack","position","a","coords","latitude","longitude","fetch","response","json","userLocation","results","failureCallBack","error","console","log","className","Button","variant","onClick","navigator","geolocation","getCurrentPosition","formatted","map","data","flag","Object","keys","components","forEach","i","Grid","container","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wQAAaA,EAAgB,CAC3B,OACA,OACA,iBACA,QACA,WACA,UACA,a,OCCIC,EAAOC,YAAOC,IAAPD,EAAc,gBAAGE,EAAH,EAAGA,MAAH,mBAAC,eACvBA,EAAMC,WAAWC,OADK,IAEzBC,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACXC,MAAON,EAAMO,QAAQC,KAAKC,eAGb,SAASC,IACtB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,IACAC,OAAOC,iBAAiB,oBAAqBF,MAG/C,IAAMA,EAAmB,WACgB,sBAAnCC,OAAOE,OAAOC,YAAYC,KAC5BX,GAAe,GAC6B,qBAAnCO,OAAOE,OAAOC,YAAYC,MACnCX,GAAe,IAIbY,EAAe,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,+DACUD,EAASE,OAAjCC,EADc,EACdA,SAAUC,EADI,EACJA,UADI,SAECC,MAAM,kDAAD,OACwBF,EADxB,YACoCC,EADpC,0CAFN,cAEhBE,EAFgB,gBAKKA,EAASC,OALd,OAKhBC,EALgB,OAMtBnB,EAAYmB,EAAaC,QAAQ,IANX,2CAAH,sDASfC,EAAkB,SAACC,GACvBC,QAAQC,IAAI,aAAcF,IAYtB7B,EAAQQ,EAAqC,gBAAvB,qBAC5B,OACE,qBAAKwB,UAAU,OAAf,SACG5B,EACC,gCACE,sBAAK4B,UAAU,MAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,0BAAwC,IACxC,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAhB3CvB,OAAOwB,UAAUC,aACnBzB,OAAOwB,UAAUC,YAAYC,mBAC3BrB,EACAW,IAaM,kCAIDtB,GAAY,6BAAKA,EAASiC,eAE5BjC,GACCE,GACApB,EAAcoD,KAAI,SAACC,GACjB,IAAIC,GAAO,EAMX,OALAC,OAAOC,KAAKtC,EAASuC,YAAYC,SAAQ,SAACC,GACpCN,IAASM,GAAKzC,EAASuC,WAAWJ,KACpCC,GAAO,MAIT,mCACGA,GACC,+BACGD,EADH,KACWnC,EAASuC,WAAWJ,WAMxCnC,GACC,qBAAK0B,UAAU,eAAf,SACE,eAACgB,EAAA,EAAD,CAAMC,WAAS,EAACrD,QAAS,GAAzB,UACE,cAACP,EAAD,UAAOW,IAAa,IACpB,cAACiC,EAAA,EAAD,CACEC,QAAQ,OACRC,QAAS,kBAAM1B,GAAgBD,IAFjC,gCAWR,6DCnGR,IAAM0C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACpD,EAAD,MAEFgD,K","file":"static/js/main.5e1748f2.chunk.js","sourcesContent":["export const dataToBeShown = [\r\n  \"road\",\r\n  \"city\",\r\n  \"state_district\",\r\n  \"state\",\r\n  \"postcode\",\r\n  \"country\",\r\n  \"continent\"\r\n];\r\n","import React, { useEffect, useState } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { dataToBeShown } from \"./constant\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: theme.palette.text.secondary\n}));\n\nexport default function App() {\n  const [isLandscape, setIsLandscape] = useState(false);\n\n  const [userData, setUserData] = useState();\n  const [showDetails, setShowDetails] = useState(false);\n\n  useEffect(() => {\n    checkOrientation();\n    window.addEventListener(\"orientationchange\", checkOrientation);\n  });\n\n  const checkOrientation = () => {\n    if (window.screen.orientation.type === \"landscape-primary\") {\n      setIsLandscape(true);\n    } else if (window.screen.orientation.type === \"portrait-primary\") {\n      setIsLandscape(false);\n    }\n  };\n\n  const successCallBack = async (position) => {\n    const { latitude, longitude } = position.coords;\n    const response = await fetch(\n      `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=1c691fc6e3f94761b93e96943e0d18dc`\n    );\n    const userLocation = await response.json();\n    setUserData(userLocation.results[0]);\n  };\n\n  const failureCallBack = (error) => {\n    console.log(\"Error ===>\", error);\n  };\n\n  const getUserLocation = () => {\n    if (window.navigator.geolocation) {\n      window.navigator.geolocation.getCurrentPosition(\n        successCallBack,\n        failureCallBack\n      );\n    }\n  };\n\n  const text = !showDetails ? \"Want more details?\" : \"Hide details.\";\n  return (\n    <div className=\"main\">\n      {isLandscape ? (\n        <div>\n          <div className=\"App\">\n            <div className=\"flex-container\">\n              <h1 className=\"title\">Where Am I? </h1>{\" \"}\n              <Button variant=\"contained\" onClick={() => getUserLocation()}>\n                Get your Location\n              </Button>\n            </div>\n            {userData && <h1>{userData.formatted}</h1>}\n          </div>\n          {userData &&\n            showDetails &&\n            dataToBeShown.map((data) => {\n              let flag = false;\n              Object.keys(userData.components).forEach((i) => {\n                if (data === i && userData.components[data]) {\n                  flag = true;\n                }\n              });\n              return (\n                <>\n                  {flag && (\n                    <h3>\n                      {data}: {userData.components[data]}\n                    </h3>\n                  )}\n                </>\n              );\n            })}\n          {userData && (\n            <div className=\"more-details\">\n              <Grid container spacing={0.5}>\n                <Item>{text}</Item>{\" \"}\n                <Button\n                  variant=\"text\"\n                  onClick={() => setShowDetails(!showDetails)}\n                >\n                  Click here\n                </Button>\n              </Grid>\n            </div>\n          )}\n        </div>\n      ) : (\n        <h1>Please rotate your phone!</h1>\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}